// Celine Binder && Curly
// 27th Feb 2017
// Simple Text Adventure

#include <Arduboy2.h>
Arduboy2 ab;

#define GAME_INTRO                0
#define GAME_START                1
#define PLAY                      2 // pause
#define PLAYER_TWO                3 // lose
#define PLAYER_TWO_LOSE           4 // highscore?
byte gameProgress = 0;
int locx = 200;
int locy = 0;
int locx2 = 0;
int locy2 = 0;
int rickhp = 1;
int mortyhp = 1;
int mtlocx = 0;
int mtlocy = 0;
int mts = 0;
int psel = 0;
int lvlz = 0;
int floorz = 99;
int floorz2 = 99;
int screen = 0;
int leftlim = 0;
int rightlim = 110;
int uplim = 0;
int downlim = 0;
int leftlim2 = 0;
int rightlim2 = 110;
int uplim2 = 0;
int downlim2 = 0;

const unsigned char titlescreen[] PROGMEM  = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xfc, 0xfe, 0xff, 0x3f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0xfe, 0xfe, 0xfc, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x40, 0x40, 0x40, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xf8, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf8, 0xfc, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf0, 0xe0, 0xc0, 0xc0, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0x7f, 0x3f, 0x1f, 0xf, 0x00, 0x00, 0x00, 0xf0, 0xfb, 0xfb, 0xf3, 0x00, 0x00, 0xe0, 0xe0, 0xf0, 0xf0, 0x70, 0x30, 0x30, 0x30, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xf0, 0xf0, 0x78, 0x1c, 0x1e, 0xe, 0xe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf, 0x18, 0x60, 0xc0, 0x40, 0x60, 0x21, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x7f, 0xf, 0x1f, 0xff, 0xff, 0xf8, 0xc0, 0xe0, 0xf8, 0xfe, 0xff, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0xc0, 0xe0, 0xe0, 0xf0, 0x70, 0x70, 0xe0, 0xc0, 0x00, 0x60, 0xf0, 0xf8, 0xdc, 0x8e, 0xce, 0xfc, 0xfc, 0x78, 0x20, 0x80, 0x80, 0xff, 0xff, 0xc0, 0x80, 0x80, 0x00, 0xfc, 0xfc, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x1, 0xf, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xf, 0xf, 0xf, 0x1f, 0x3f, 0x7e, 0xfc, 0xfc, 0xf8, 0xf0, 0xc0, 0xc0, 0x9f, 0x3f, 0x7f, 0x3f, 0x00, 0x3e, 0x7f, 0x7f, 0x7b, 0x70, 0x70, 0x70, 0x60, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xf, 0xf, 0x1f, 0x7f, 0xfe, 0xfc, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x46, 0x62, 0x33, 0x11, 0x1b, 0xe, 0x14, 0x24, 0x42, 0x81, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xfe, 0xff, 0xff, 0x3, 0x00, 0x00, 0x00, 0x00, 0x3, 0xf, 0x3f, 0x7f, 0x3f, 0x3f, 0x3, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0xf, 0x3f, 0x3f, 0x3c, 0x38, 0x1c, 0x1f, 0xf, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x1f, 0x3f, 0xfd, 0xf0, 0xc0, 0x1, 0x1, 0x3, 0x3f, 0x3f, 0x3, 0x1, 0x1, 0x80, 0xc7, 0xff, 0x7f, 0x38, 0x1c, 0x1f, 0x3, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x3, 0x7, 0xf, 0x1f, 0x3f, 0x7f, 0x7f, 0x7c, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x7, 0xf, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7, 0xf, 0x3f, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x81, 0xe1, 0xf0, 0x70, 0x38, 0x18, 0xc, 0x6, 0x7, 0x3, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x3, 0x3, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x8, 0x8, 0x8, 0xf, 0x00, 0x00, 0x7e, 0x2, 0x2, 0x00, 0x7c, 0x4e, 0x4a, 0x4e, 0xc, 0x00, 0x4e, 0x4a, 0x7a, 0x72, 0x00, 0x00, 0x4c, 0x56, 0x72, 0x72, 0x00, 0x00, 0x00, 0x00, 0x40, 0x30, 0x1c, 0x13, 0x11, 0x16, 0x38, 0x40, 0x00, 0x00, 0x00, 0x2, 0x3f, 0x42, 0x42, 0x00, 0x3c, 0x42, 0x42, 0x42, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x4e, 0x5a, 0x72, 0x00, 0x2, 0x3f, 0x42, 0x42, 0x00, 0x30, 0x4a, 0x4a, 0x4a, 0x7c, 0x00, 0x00, 0x7e, 0x2, 0x2, 0x00, 0x2, 0x3f, 0x42, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    };

const unsigned char gamestartscreen[] PROGMEM  = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x44, 0x44, 0x00, 0x7c, 0x10, 0x10, 0x7c, 0x00, 0x7c, 0x44, 0x7c, 0x00, 0x7c, 0x44, 0x7c, 0x00, 0x5c, 0x54, 0x74, 0x00, 0x7c, 0x54, 0x54, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x24, 0x3c, 0x00, 0x7c, 0x40, 0x00, 0x7c, 0x14, 0x7c, 0x00, 0x1c, 0x70, 0x1c, 0x00, 0x7c, 0x54, 0x54, 0x00, 0x7c, 0x14, 0x14, 0x6c, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xfc, 0xbc, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0xfc, 0xf8, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0x00, 0x00, 0xc0, 0xf0, 0xf8, 0xf8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7, 0xff, 0xff, 0xfc, 0xf8, 0xf0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0xf8, 0xf8, 0xbc, 0x1c, 0x1c, 0xc, 0xc, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfc, 0xdc, 0x8e, 0x6, 0x7, 0x3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xfe, 0xff, 0xf, 0x7, 0x3, 0xf, 0xf, 0xfc, 0xfc, 0xff, 0xf, 0x7, 0xff, 0xff, 0xc0, 0x3c, 0xfc, 0xfe, 0xce, 0xc6, 0x66, 0x3c, 0x00, 0x00, 0xff, 0xff, 0x79, 0x79, 0xef, 0xc3, 0x8, 0x1c, 0xff, 0x3f, 0x8, 0x00, 0x1f, 0xff, 0xfc, 0x70, 0x70, 0x1c, 0xc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1, 0x1, 0x3, 0xf, 0x1e, 0x1e, 0x3c, 0x7d, 0x79, 0x70, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x00, 0x00, 0x00, 0x7, 0x7, 0x00, 0x3, 0xf, 0x1f, 0x1e, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0x7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3, 0x3, 0x00, 0x00, 0xc3, 0xe3, 0x60, 0x20, 0x10, 0x18, 0xc, 0x7, 0x3, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x44, 0x44, 0x44, 0x7c, 0x00, 0x00, 0xf0, 0x10, 0x10, 0x00, 0xe0, 0x70, 0x50, 0x70, 0x60, 0x00, 0x70, 0x50, 0xd0, 0x90, 0x00, 0x00, 0x60, 0xb0, 0x90, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0x98, 0x8c, 0xb0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x44, 0x44, 0x44, 0x7c, 0x00, 0x00, 0xf0, 0x10, 0x10, 0x00, 0xe0, 0x70, 0x50, 0x70, 0x60, 0x00, 0x70, 0x50, 0xd0, 0x90, 0x00, 0x00, 0x60, 0xb0, 0x90, 0x90, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xfc, 0x44, 0x44, 0x44, 0x44, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3, 0x00, 0x00, 0x00, 0x3, 0x2, 0x82, 0x42, 0x80, 0x40, 0x22, 0x92, 0xa3, 0xc3, 0xa0, 0x10, 0xa2, 0x42, 0x3, 0x3, 0x00, 0x00, 0x00, 0x00, 0x2, 0x1, 0x00, 0x00, 0x00, 0x00, 0x1, 0x2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3, 0x00, 0x00, 0x00, 0x3, 0x2, 0x2, 0x2, 0x00, 0x00, 0x2, 0x2, 0x3, 0x3, 0x00, 0x00, 0x2, 0x2, 0x3, 0x3, 0x00, 0x00, 0x00, 0x00, 0x7, 0x7, 0x4, 0x4, 0x4, 0x4, 0x3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x2, 0x4, 0xc8, 0x2f, 0xf1, 0x90, 0x90, 0xfa, 0x28, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0xde, 0x46, 0x46, 0xea, 0xa2, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf, 0x00, 0x00, 0xf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3, 0x00, 0xf, 0x2, 0x2, 0xf, 0x00, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      };

const unsigned char littlerick[] PROGMEM  = {
  0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x80, 0xc0, 0xe0, 0xf0, 0xfc, 0xfe, 0xfe, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xc0, 0x80, 0x00, 0x00, 0x7c, 0xff, 0xfe, 0x78, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x3e, 0x7c, 0xf8, 0xf8, 0xf8, 0xf8, 0x78, 0x7f, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0x7f, 0x7f, 0x7f, 0xff, 0xfd, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0x3e, 0xe, 0x6, 0x00, 0x00, 0x00, 0xc2, 0xdf, 0xdf, 0x1f, 0xf, 0x00, 0x00, 0x00, 0x7e, 0xfe, 0xfe, 0xf0, 0xc0, 0x00, 0x8, 0xc, 0x3c, 0x3c, 0xdf, 0x2f, 0x21, 0xea, 0x9b, 0x7b, 0x3f, 0xcf, 0xef, 0x6b, 0x6b, 0xeb, 0xcf, 0x1f, 0xff, 0xff, 0xfe, 0xfd, 0xf3, 0xf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x8f, 0xef, 0xf1, 0xfc, 0x3f, 0x1f, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x7, 0x1f, 0x3f, 0x7e, 0xfc, 0xf0, 0xe0, 0x80, 0x1, 0x13, 0x7b, 0x7b, 0x1, 0x3c, 0x3e, 0x71, 0x77, 0x76, 0x36, 0xb7, 0xf3, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7d, 0x7b, 0x93, 0x8f, 0xf7, 0xf9, 0xfe, 0x7f, 0x1f, 0x7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3, 0xf, 0x1f, 0x3f, 0xff, 0xfe, 0xf8, 0xf1, 0xc1, 0xc3, 0x9b, 0x3d, 0xbd, 0xbc, 0xbe, 0xbf, 0xdf, 0xdf, 0x6f, 0x2f, 0x8f, 0xf1, 0xfc, 0xff, 0x7e, 0x3f, 0x1f, 0x7, 0x3, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x7, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  };

const unsigned char littlemorty[] PROGMEM  = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xd0, 0xd0, 0xd8, 0xd8, 0x1c, 0x3c, 0xbc, 0xbe, 0x1e, 0x4e, 0xee, 0xee, 0xee, 0xee, 0xee, 0x6c, 0x48, 0x58, 0x58, 0xd0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x3e, 0x76, 0xc6, 0x82, 0x3, 0x3, 0x3, 0x1, 0x1, 0xfd, 0x7d, 0x19, 0xeb, 0xf3, 0xf9, 0x9d, 0x9d, 0xfd, 0xf8, 0xf6, 0xf, 0xff, 0xff, 0xf, 0xf2, 0xf8, 0x99, 0x9d, 0xf9, 0xf1, 0xe4, 0xe, 0xfe, 0xfc, 0xf8, 0x2, 0x7e, 0xfe, 0xc, 0x00, 0x80, 0xe0, 0x70, 0x38, 0xf, 0x3, 0x00, 0x00, 0x00, 0x00, 0x1, 0x1, 0x3, 0x6, 0xc, 0x60, 0xf8, 0xf1, 0xc4, 0x9e, 0x7c, 0xf9, 0xfb, 0xfb, 0x1b, 0xb, 0x9, 0x2c, 0x2e, 0x2f, 0x2f, 0xc, 0x19, 0xfb, 0xfb, 0xfb, 0xfb, 0xf9, 0xfc, 0xfe, 0xff, 0x3f, 0x9f, 0xc7, 0xf0, 0xfc, 0x78, 0x33, 0x7, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x3, 0xf, 0xf, 0x1e, 0x38, 0x3b, 0xf3, 0xe6, 0xe8, 0xea, 0xea, 0xca, 0xca, 0xc8, 0xcc, 0xcf, 0xef, 0xef, 0xef, 0xe7, 0xf3, 0x79, 0x1e, 0xf, 0x3, 0x1, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  };

const unsigned char playerrick[] PROGMEM  = {
0x00, 0x10, 0x28, 0x44, 0x88, 0xf4, 0x12, 0x9, 0xa, 0xac, 0x8a, 0x71, 0xa, 0x4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc, 0x2, 0xff, 0x9, 0x9, 0xff, 0x2, 0x4, 0x00, 0x00, 0x00, 0x00, 
};
const unsigned char playerrickbg[] PROGMEM  = {
0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb, 0xff, 0x3f, 0x3f, 0xff, 0xb, 0x11, 0x00, 0x00, 0x00, 0x00, 
};
const unsigned char playermorty[] PROGMEM  = {
0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0x60, 0x60, 0xa0, 0x20, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb, 0xfd, 0x24, 0x24, 0xfe, 0xa, 0x11, 0x00, 0x00, 0x00, 0x00, 
};
const unsigned char playermortybg[] PROGMEM  = {
0x00, 0x10, 0x38, 0x7c, 0xf8, 0xfc, 0xfe, 0xff, 0xfe, 0xfc, 0xfe, 0x7f, 0xe, 0x4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc, 0x2, 0xff, 0xf, 0xf, 0xff, 0x2, 0x4, 0x00, 0x00, 0x00, 0x00, 
};
const unsigned char megatree[] PROGMEM  = {
   0x00, 0xe0, 0xf8, 0xee, 0x2, 0x2, 0x4, 0x4, 0xc, 0x18, 0x70, 0xf8, 0x8c, 0xe7, 0x27, 0x37, 0x10, 0x10, 0x10, 0x10, 0x70, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x9c, 0xdc, 0x5e, 0x42, 0x62, 0x22, 0xa6, 0x74, 0xff, 0xf3, 0x98, 0x84, 0x84, 0x84, 0xc, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1f, 0x1c, 0x00, 0x00, 0x00, 0x00, 0xff, 0x10, 0x00, 0x1, 0xff, 0x00, 0x00, 0x1, 0x3b, 0x3e, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x12, 0x10, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x51, 0x40, 0x40, 0x13, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x48, 0x40, 0x40, 0x40, 0x13, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xf0, 0x8, 0xc, 0x48, 0x8, 0x2f, 0x8, 0x8, 0xa8, 0x8, 0x18, 0x49, 0xf, 0x70, 0xe0, 0x40, 0x00, 0x00, 0x00, 0x00, 
};
const unsigned char megatreeempty[] PROGMEM  = {
0x00, 0x00, 0x18, 0xe, 0x2, 0x2, 0x4, 0x4, 0xc, 0x18, 0x70, 0xf8, 0x8c, 0xe4, 0x24, 0x34, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x70, 0x00, 0x00, 0x00, 0x00, 0x9c, 0xd0, 0x5e, 0x42, 0x62, 0x22, 0xa6, 0x74, 0xff, 0xf3, 0x98, 0x84, 0x84, 0x84, 0xc, 0x8, 0x8, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x10, 0x00, 0x1, 0xff, 0x00, 0x00, 0x1, 0x3, 0x3e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x12, 0x10, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x51, 0x40, 0x40, 0x13, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x48, 0x40, 0x40, 0x40, 0x13, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xf0, 0x8, 0xc, 0x48, 0x8, 0x2f, 0x8, 0x8, 0xa8, 0x8, 0x18, 0x49, 0xf, 0x70, 0xe0, 0x40, 0x00, 0x00, 0x00, 0x00, 
};

const unsigned char brokemort[] PROGMEM  = {
0xc0, 0xe0, 0xf0, 0x78, 0xb8, 0xbc, 0xdc, 0xde, 0x6e, 0x6e, 0x6e, 0x6e, 0x6c, 0x2c, 0xa8, 0xa0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x8, 0x90, 0x50, 0x50, 0x30, 0x00, 0x00, 0x00, 0x00, 0x87, 0xc9, 0xf1, 0xc2, 0x84, 0xf8, 0x1f, 0x3f, 0x7, 0x70, 0xff, 0xff, 0xe1, 0xec, 0xde, 0xdf, 0x6d, 0x2f, 0x30, 0x17, 0x17, 0x16, 0xf7, 0x7b, 0x80, 0xc0, 0xe0, 0xe0, 0xe0, 0x40, 0x60, 0xa0, 0xa0, 0x90, 0x50, 0x4c, 0x22, 0x19, 0x6, 0x1, 0x00, 0x00, 0x00, 0xe0, 0x38, 0xc, 0x4, 0xe7, 0xaf, 0x3d, 0x1f, 0xf, 0x3, 0x3, 0x00, 0xf0, 0xf0, 0xf8, 0xfc, 0xfd, 0xf9, 0xf3, 0xf7, 0xe7, 0xec, 0xec, 0xec, 0xe4, 0xf6, 0xf3, 0xf9, 0xfe, 0xff, 0xff, 0xe3, 0xc3, 0x81, 0x81, 0x81, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x81, 0xf3, 0x1e, 0x00, 0x00, 0x1, 0xc3, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x47, 0x87, 0x1f, 0x20, 0x41, 0x81, 0x3, 0x7, 0xf, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x3, 0x1, 0x1, 0x1, 0x38, 0x28, 0x48, 0x48, 0x88, 0x88, 0x88, 0xf, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1, 0x2, 0xc, 0x10, 0x21, 0x42, 0x44, 0x44, 0x88, 0x90, 0x90, 0xa0, 0x40, 0x1, 0x1, 0x1, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x2, 0x2, 0x82, 0xc6, 0x44, 0x24, 0x14, 0x14, 0xc, 0x80, 0x40, 0x20, 0x11, 0x19, 0xd, 0x86, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7, 0xc, 0x8, 0x18, 0x1c, 0x36, 0x72, 0xff, 0x9c, 0x88, 0x8c, 0x86, 0x83, 0x81, 0x60, 0x39, 0xf, 0x00, 
};


void lvl0() { //this is where we create lvl 0, same thing for each lcl but change the floorz and the tree location
        if (screen == 0) {
        mtlocx = 0;
        mtlocy = 0;
        }
        if ((locx == 200)&& mortyhp >= 1) {
          locx = 101;
          locy = 13;
          locx2 = (110);
          locy2 = 13;
          leftlim = 0;
        }
        ab.drawFastHLine(100,30,120,WHITE);
        ab.drawFastHLine(0,57,100,WHITE);
        ab.drawFastVLine(100,30,65,WHITE);
        if (mts == 0) {
        ab.drawBitmap(mtlocx, mtlocy, megatree, 24, 56, WHITE);
        }
        if (mts == 1) {
        ab.drawBitmap(mtlocx, mtlocy, megatreeempty, 24, 56, WHITE);
        }
        if (locx <= 89 && locx >= 14) { //defines the floor
          floorz = 41;
          
        }
        if (locx2 <= 89 && locx2 >= 14) { //defines the floor woah dude this might work
          floorz2 = 41;
          
        }
        if (locx > 89) { 
          floorz = 13; // defines the floor if locx is more than 89
          rightlim = 111;
        }
        if (locx2 > 89) { 
          floorz2 = 13; // defines the floor if locx2 is more than 89
          rightlim2 = 111;
        }
        if (locx <= 89) { //at or past gateway to upper lvl
            
            if (locy > 13){ //if below the top lvl
              rightlim = 89;
            }
            if (locy <= 13){ //if below the top lvl
              rightlim = 111;
            }
                
      
          } 
          if (locx2 <= 89) { //at or past gateway to upper lvl
            
            if (locy2 > 13){ //if below the top lvl
              rightlim2 = 89;
            }
            if (locy2 <= 13){ //if below the top lvl
              rightlim2 = 111;
            }
                
      
          }        
       if (locx == 89){ //climb up and down the cliff
            downlim = 41;
            uplim = 13;
            if (locy == 13){
              ab.setCursor (locx, (locy - 10)); 
      ab.print("!");
            }
             if (locy == 41){
              ab.setCursor (locx, (locy - 10)); 
      ab.print("i");
            }
          }
          if ((locx >= 0) && (locx <= 12)){ //rick climb up and down the mega tree
            downlim = 41;
            uplim = 13;
            
            if (locy == 13) {
              ab.setCursor (locx, (locy - 10)); 
              ab.print("!");
              
               if (mts == 0) {
                mts = 1;
               }
            }
          
         }
          if ((locx2 >= 0) && (locx2 <= 12)){ //morty climb up and down the mega tree
            downlim2 = 41;
            uplim2 = 13;
            if (locy2 == 13){
              ab.setCursor (locx2, (locy2 - 10)); 
              ab.print("!");
               if (mts == 0) {
                mts = 1;
               }
            }
             if (locy2 == 41){
              ab.setCursor (locx2, (locy2 - 10)); 
      ab.print("i");
            }
          }
       if (locx != 89 && (locx > 13)) { //this needs worrrrrk 
            downlim = 0;
            uplim = 0;
         }
       if (locx2 != 89 && (locx2 > 13)) { //this needs worrrrrk 
            downlim2 = 0;
            uplim2 = 0;
         }
       // } dont think i need this one
}

void lvl() { //here is where we call the current lvl
       if (lvlz == 0) {
        lvl0();
       }
}
void setup() {
  ab.begin();
  ab.setFrameRate(30);
}

void loop() {

  if (!ab.nextFrame()) return;
  ab.pollButtons();
  ab.clear();

  switch (gameProgress)
  {
    case GAME_INTRO:
      ab.drawBitmap(0, 0, titlescreen, 128, 64, WHITE);
      if (ab.justPressed(A_BUTTON)) gameProgress = GAME_START;
      break;
    case GAME_START:
      
      ab.drawBitmap(0, 0, gamestartscreen, 128, 64, WHITE);
      if (ab.justPressed(A_BUTTON)) { gameProgress = PLAY; psel = 0; }
      else if (ab.justPressed(B_BUTTON)) { gameProgress = PLAY; psel = 1; }
      break;
    case PLAY: //curly edit
   // if && (locx < rightlim && ab.pressed(RIGHT_BUTTON)){
        if ((psel == 0) && (locx < rightlim) && ab.pressed(RIGHT_BUTTON)) {
          locx +=1;
        }
        if ((psel == 1) && (locx2 < rightlim2) && ab.pressed(RIGHT_BUTTON)) {
          locx2 +=1;
        }
     // }
      //if (locx > leftlim && ab.pressed(LEFT_BUTTON)){
        if ((psel == 0) && (locx > leftlim) && ab.pressed(LEFT_BUTTON)) {
          locx -=1;
        }
        if ((psel == 1) && (locx2 > leftlim2) && ab.pressed(LEFT_BUTTON)) {
          locx2 -=1;
        }
     // }
     // if (locy > uplim && ab.pressed(UP_BUTTON)){
        if ((psel == 0) && (locy > uplim) && ab.pressed(UP_BUTTON)) {
          locy -=1;
        }
        if ((psel == 1) && (locy2 > uplim2) && ab.pressed(UP_BUTTON)) {
          locy2 -=1;
        }
      //}
      //if (locy < downlim && ab.pressed(DOWN_BUTTON)){
        if ((psel == 0) && (locy < downlim) && ab.pressed(DOWN_BUTTON)) {
          locy +=1;
        }
        if ((psel == 1) && (locy2 < downlim2) && ab.pressed(DOWN_BUTTON)) {
          locy2 +=1;
        }
      //}
      ab.setCursor (102, 31); // testing purposes to be removed later
      ab.print(locy);
      ab.setCursor (115, 31); 
      ab.print("y");
      ab.setCursor (102, 40);
      ab.print(floorz);
      
      ab.setCursor (102, 50);
      ab.print(locx);
      
      ab.setCursor (0, 58); 
      ab.print("l");
      ab.setCursor (10, 58); 
      ab.print(leftlim);
      ab.setCursor (30, 58); 
      ab.print("r");
      ab.setCursor (40, 58); 
      ab.print(rightlim);
      ab.setCursor (60, 58); 
      ab.print("u");
      ab.setCursor (70, 58); 
      ab.print(uplim);
      ab.setCursor (90, 58); 
      ab.print("d");
      ab.setCursor (100, 58); 
      ab.print(downlim);
      //ab.setCursor (60, 0); 
      //ab.print(gurp);
      //end of test stuff to be removed
        lvl(); //selects and calls the proper lvl
        
        ab.drawBitmap(locx, locy, playerrickbg, 16, 16, BLACK);
        ab.drawBitmap(locx, locy, playerrick, 16, 16, WHITE);
        ab.drawBitmap(locx2, locy2, playermortybg, 16, 16, BLACK);
        ab.drawBitmap(locx2, locy2, playermorty, 16, 16, WHITE);
      if (locy >= 65) {
      locx = 0;
      locy = 41; //resets location after death
        gameProgress = GAME_START;
        
      }
      //arduboy.setCursor (0, 50);
      //arduboy.print("You Win!");
      //jump
      if (ab.justPressed(A_BUTTON)) {
        if ((psel == 0) && (locy == floorz)) { locy -= 16;
        }
        if ((psel == 1) && (locy2 == floorz2)) { locy2 -= 16;
        }
      }
      //if above floor come back down
      if ((locy < floorz) && downlim == 0){ //probably dont need the =
        locy +=1;
      }
      if ((locy2 < floorz2) && downlim2 == 0){ //probably dont need the =
        locy2 +=1;
      }
      break;
    case PLAYER_TWO: //this is being swapped out for the pause menu
      ab.drawFastHLine(0,57,100,WHITE);
      ab.drawFastVLine(100,57,64,WHITE);
      ab.drawBitmap(70, 0, megatree, 24, 56, WHITE);
      ab.drawBitmap(locx + 10, locy, playermorty, 16, 16, WHITE);
      if (ab.everyXFrames(3) && (locx <= 100)){
        locx +=1;
      }
      if (ab.everyXFrames(3) && (locx >= 100)){
        locy +=1;
      }
      if (locy >= 65) {
        gameProgress = PLAYER_TWO_LOSE;
        
      }
      //arduboy.setCursor (0, 50);
      //arduboy.print("You Lose!");
      //if (arduboy.justPressed(A_BUTTON | B_BUTTON)) gameProgress = GAME_START;
      break;
     case PLAYER_TWO_LOSE:
     ab.drawBitmap(0, 0, brokemort, 48, 48, WHITE);
     ab.setCursor (0, 50);
     ab.print("You Lose!");
     if (ab.justPressed(A_BUTTON | B_BUTTON)) gameProgress = GAME_START;
     break;
  }
  ab.display();
}
